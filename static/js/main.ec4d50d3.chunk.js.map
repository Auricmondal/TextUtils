{"version":3,"sources":["Navbar.js","Textform.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","toUp1CAse","Textform","useState","text","setText","heading","placeholder","style","backgroundColor","color","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","navigator","clipboard","writeText","window","confirm","length","Math","round","defaultProps","Alert","alert","role","message","App","setMode","setAlert","setMyStyle","word","charAt","slice","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec4d50d3.chunk.js","sourcesContent":["import React  from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n  \r\n  \r\n    return (\r\n      <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\" >\r\n    \r\n    <a className=\"navbar-brand\"  href=\"#\"> <b>{props.title}</b> </a>\r\n    <button className=\"navbar-toggler\" type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\" >Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\" >About</a>\r\n        </li>\r\n        \r\n      </ul>\r\n\r\n       \r\n        {/* Radio to enable darkmode */}\r\n    <div className={(`form-check form-switch text-${(props.mode===\"light\"?\"dark\":\"light\")}`)}>\r\n      \r\n     \r\n    <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n    <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\" >Enabled  {`${props.toUp1CAse(props.mode)}`} Mode</label>\r\n\r\n    \r\n\r\n    </div>\r\n\r\n           {/* Radio to enable darkmode end */}\r\n    \r\n    </div>\r\n\r\n  </div>\r\n</nav>\r\n</>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\n          title:    PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title: 'Set title Here'\r\n};","import React , {useState}  from 'react'\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n    const [text,setText]= useState('')\r\n    \r\n    const handlecopy=()=>{\r\n      \r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Copied!\",\"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange =(event) =>{\r\n        setText(event.target.value);\r\n  \r\n    }\r\n\r\n    const handleupclick =() =>{\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Changed to Upper Case!\",\"success\");\r\n        \r\n    }\r\n\r\n    const handlednclick =() =>{\r\n      let newText= text.toLowerCase();\r\n      setText(newText)\r\n      props.showAlert(\"Changed to Lower Case!\",\"success\");\r\n    }\r\n\r\n    const handleclclick =() =>{\r\n     if(window.confirm(\"Do you really want to clear the whole ?\")===true) \r\n      setText(\"\")\r\n      props.showAlert(\"Cleared!\",\"warning\");\r\n      \r\n    }\r\n    const handleXSPC =() =>{\r\n     let newText= text.split(/[ ]+/);\r\n     setText(newText.join(\" \"));\r\n    \r\n      \r\n    }\r\n\r\n    return (\r\n    <>\r\n    <div className=\"container\" >\r\n    <h1 className=\" my-2  \">{props.heading}</h1>\r\n      <div className=\"mb-3 \">\r\n        <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\" ></label>\r\n        <textarea className=\"form-control\" id=\"myBox\" placeholder=\"Enter Text Here\" style={{backgroundColor:(props.mode===\"light\"?\"white\":\"#1d1e1f\"),color:(props.mode===\"light\"?\"black\":\"white\")}} value={text} onChange={handleOnChange} rows=\"6\"></textarea>\r\n      <button className=\"btn btn-primary my-2 mx-2\" onClick={handleupclick} >Convert to Capital Letter</button>\r\n      <button className=\"btn btn-primary my-2 \" onClick={handlednclick} >Convert to Small Letter</button>\r\n      <button className=\"btn btn-success my-2 mx-2 \" onClick={handleXSPC} >X Extra Spaces</button>\r\n      <button className=\"btn btn-success my-2   \" onClick={handlecopy} >Copy</button>\r\n      <button className=\"btn btn-danger my-2 mx-2  \" onClick={handleclclick} >Clear</button>\r\n      </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1 className=\"my-2\">Your Text Summary</h1>\r\n       \r\n        <p>{(text.split(\" \").length-1)} words and {text.length} characters</p>\r\n        <p>Average time taken to read : {Math.round((text.split(\" \").length-1)*0.08)} seconds</p>\r\n         <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Text To Preview Here\"}</p>\r\n      </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n   \r\n\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show `}role=\"alert\">\r\n        <strong>{props.toUp1CAse(props.alert.type)}!</strong> {props.alert.message}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n// ${props.alert.type}{props.alert.message}","// import About from './About';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Textform from './Textform';\nimport React, { useState } from 'react'\nimport Alert from './Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n \n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n\n  const [alert, setAlert] = useState(null);\n\n  const [myStyle, setMyStyle] = useState({\n\n    color:\"black\",\n    backgroundColor:\"white\"\n\n})\n\n\n  const toUp1CAse=(word)=>{\n    return word.charAt(0).toUpperCase()+word.slice(1);\n }\n\n  const showAlert  =(message,type)=>{\n    setAlert({\n      message: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n\n  \n\n  const toggleMode=() =>{\n    if(mode===\"light\")\n    {\n      setMyStyle({color:\"white\", backgroundColor:\"#1e2933\"})\n      setMode(\"dark\")\n      document.body.style.backgroundColor=\"#102437\";\n      document.body.style.color=\"white\";\n      showAlert(\"Dark Mode have been enables!\",\"success\");\n      \n    }\n    else\n    {\n      setMyStyle({color:'black', backgroundColor:'white'})\n      setMode(\"light\")\n      document.body.style.backgroundColor=\"white\";\n      document.body.style.color=\"#212529\";\n      showAlert(\"Light Mode have been enables!\",\"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n   <Navbar title=\"Textutils\" mode={mode} toggleMode= {toggleMode} toUp1CAse={toUp1CAse} />\n   <Alert alert={alert} toUp1CAse={toUp1CAse} />\n   \n  \n  {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} style={myStyle}/>\n          </Route>\n          <Route exact path=\"/\"> */}\n          <Textform heading=\"Enter Text Here\" mode={mode} showAlert={showAlert} toUp1CAse={toUp1CAse} />\n          {/* </Route>\n        </Switch>\n        </Router> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}